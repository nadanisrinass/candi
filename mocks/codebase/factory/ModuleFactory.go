// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/golangid/candi/codebase/interfaces"
	mock "github.com/stretchr/testify/mock"

	types "github.com/golangid/candi/codebase/factory/types"
)

// ModuleFactory is an autogenerated mock type for the ModuleFactory type
type ModuleFactory struct {
	mock.Mock
}

// GRPCHandler provides a mock function with given fields:
func (_m *ModuleFactory) GRPCHandler() interfaces.GRPCHandler {
	ret := _m.Called()

	var r0 interfaces.GRPCHandler
	if rf, ok := ret.Get(0).(func() interfaces.GRPCHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.GRPCHandler)
		}
	}

	return r0
}

// GraphQLHandler provides a mock function with given fields:
func (_m *ModuleFactory) GraphQLHandler() interfaces.GraphQLHandler {
	ret := _m.Called()

	var r0 interfaces.GraphQLHandler
	if rf, ok := ret.Get(0).(func() interfaces.GraphQLHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.GraphQLHandler)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *ModuleFactory) Name() types.Module {
	ret := _m.Called()

	var r0 types.Module
	if rf, ok := ret.Get(0).(func() types.Module); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Module)
	}

	return r0
}

// RESTHandler provides a mock function with given fields:
func (_m *ModuleFactory) RESTHandler() interfaces.RESTHandler {
	ret := _m.Called()

	var r0 interfaces.RESTHandler
	if rf, ok := ret.Get(0).(func() interfaces.RESTHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.RESTHandler)
		}
	}

	return r0
}

// ServerHandler provides a mock function with given fields: serverType
func (_m *ModuleFactory) ServerHandler(serverType types.Server) interfaces.ServerHandler {
	ret := _m.Called(serverType)

	var r0 interfaces.ServerHandler
	if rf, ok := ret.Get(0).(func(types.Server) interfaces.ServerHandler); ok {
		r0 = rf(serverType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ServerHandler)
		}
	}

	return r0
}

// WorkerHandler provides a mock function with given fields: workerType
func (_m *ModuleFactory) WorkerHandler(workerType types.Worker) interfaces.WorkerHandler {
	ret := _m.Called(workerType)

	var r0 interfaces.WorkerHandler
	if rf, ok := ret.Get(0).(func(types.Worker) interfaces.WorkerHandler); ok {
		r0 = rf(workerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.WorkerHandler)
		}
	}

	return r0
}
