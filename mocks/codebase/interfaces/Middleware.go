// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	candishared "github.com/golangid/candi/candishared"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	types "github.com/golangid/candi/codebase/factory/types"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

// Basic provides a mock function with given fields: ctx, authKey
func (_m *Middleware) Basic(ctx context.Context, authKey string) error {
	ret := _m.Called(ctx, authKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, authKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bearer provides a mock function with given fields: ctx, token
func (_m *Middleware) Bearer(ctx context.Context, token string) (*candishared.TokenClaim, error) {
	ret := _m.Called(ctx, token)

	var r0 *candishared.TokenClaim
	if rf, ok := ret.Get(0).(func(context.Context, string) *candishared.TokenClaim); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*candishared.TokenClaim)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCBasicAuth provides a mock function with given fields: ctx
func (_m *Middleware) GRPCBasicAuth(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GRPCBearerAuth provides a mock function with given fields: ctx
func (_m *Middleware) GRPCBearerAuth(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GRPCPermissionACL provides a mock function with given fields: permissionCode
func (_m *Middleware) GRPCPermissionACL(permissionCode string) types.MiddlewareFunc {
	ret := _m.Called(permissionCode)

	var r0 types.MiddlewareFunc
	if rf, ok := ret.Get(0).(func(string) types.MiddlewareFunc); ok {
		r0 = rf(permissionCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.MiddlewareFunc)
		}
	}

	return r0
}

// GraphQLBasicAuth provides a mock function with given fields: ctx
func (_m *Middleware) GraphQLBasicAuth(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GraphQLBearerAuth provides a mock function with given fields: ctx
func (_m *Middleware) GraphQLBearerAuth(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GraphQLPermissionACL provides a mock function with given fields: permissionCode
func (_m *Middleware) GraphQLPermissionACL(permissionCode string) types.MiddlewareFunc {
	ret := _m.Called(permissionCode)

	var r0 types.MiddlewareFunc
	if rf, ok := ret.Get(0).(func(string) types.MiddlewareFunc); ok {
		r0 = rf(permissionCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.MiddlewareFunc)
		}
	}

	return r0
}

// HTTPBasicAuth provides a mock function with given fields: next
func (_m *Middleware) HTTPBasicAuth(next http.Handler) http.Handler {
	ret := _m.Called(next)

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// HTTPBearerAuth provides a mock function with given fields: next
func (_m *Middleware) HTTPBearerAuth(next http.Handler) http.Handler {
	ret := _m.Called(next)

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// HTTPMultipleAuth provides a mock function with given fields: next
func (_m *Middleware) HTTPMultipleAuth(next http.Handler) http.Handler {
	ret := _m.Called(next)

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// HTTPPermissionACL provides a mock function with given fields: permissionCode
func (_m *Middleware) HTTPPermissionACL(permissionCode string) func(http.Handler) http.Handler {
	ret := _m.Called(permissionCode)

	var r0 func(http.Handler) http.Handler
	if rf, ok := ret.Get(0).(func(string) func(http.Handler) http.Handler); ok {
		r0 = rf(permissionCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.Handler) http.Handler)
		}
	}

	return r0
}
